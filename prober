#!/usr/bin/python3
import time
import sys
from easysnmp import Session

agnt_inp = sys.argv
RequestInterval = 1 / float(agnt_inp[2])
ip, port, commun = agnt_inp[1].split(':')
ReqSamp = int(sys.argv[3])

ObjIDs = []
initOID = []
time_laststamp = ""
dt1_NextTime = 0


def pre_initOIDs():
    global ObjIDs
    for x in range(4, len(agnt_inp)):
        ObjIDs.append(sys.argv[x])
    ObjIDs.insert(0, '1.3.6.1.2.1.1.3.0')


def getResp():
    probe_session = Session(hostname=ip, remote_port=port, community='public', version=2, timeout=0.1, retries=2)
    return probe_session.get(ObjIDs)


def getResp_process(resp):
    global initOID, time_laststamp, dt1_NextTime

    nxtOID = []
    dt2_NextTime = time.time()

    for y in range(1, len(resp)):
        nxtOID.append(int(resp[y].value))

        if ReqSamp != 0 and len(initOID) > 0:
            numRate = int(nxtOID[y - 1]) - int(initOID[y - 1])
            dt_agent = round(dt2_NextTime - dt1_NextTime, 1)
            rate = (numRate / dt_agent)
            if resp[y].snmp_type in ['COUNTER32', 'COUNTER64', 'COUNTER']:
                if rate < 0:
                    if resp[y].snmp_type == 'COUNTER64':
                        numRate = numRate + 2 ** 64
                    elif resp[y].snmp_type == 'COUNTER32' or resp[y].snmp_type == 'COUNTER':
                        numRate = numRate + 2 ** 32

                try:
                    if time_laststamp == str(dt2_NextTime):
                        print(str(int(numRate / dt_agent)), end="|")
                    else:
                        print(str(int(dt2_NextTime)) + "|" + str(int(numRate / dt_agent)), end="|")
                        time_laststamp = str(dt2_NextTime)
                except:
                    print(str(int(dt2_NextTime)) + "|" + str(int(round(numRate / dt_agent))), end="|")
                    time_laststamp = str(dt2_NextTime)

            elif resp[y].snmp_type == 'GAUGE':
                numRate = int(nxtOID[y - 1]) - int(initOID[y - 1])
                if numRate>0: numRate="+"+str(numRate)
                try:
                    if time_laststamp == str(dt2_NextTime):
                        print(nxtOID[len(nxtOID) - 1], "(" + str(numRate), ")", end="|")
                    else:
                        print(
                            str(int(dt2_NextTime)) + "|" + str(nxtOID[len(nxtOID) - 1]) + "(" + str(numRate) + ")", end="|")
                        time_laststamp = str(dt2_NextTime)
                except:
                    print(
                        str(int(dt2_NextTime)) + "|" + str(nxtOID[len(nxtOID) - 1]) + "(" + str(numRate) + ")", end="|")
                    time_laststamp = str(dt2_NextTime)

    initOID[:] = nxtOID
    dt1_NextTime = dt2_NextTime


def run_probe():
    pre_initOIDs()
    s = 0
    initOID = []
    probe_session = Session(hostname=ip, remote_port=port, community='public', version=2)

    while True:
        dt2_NextTime = time.time()
        resp = getResp()
        getResp_process(resp)

        if s != 0:
            print(end="\n")

        timenow = time.time()
        s += 1
        time.sleep(abs(RequestInterval - timenow + dt2_NextTime))


def run_sample():
    pre_initOIDs()
    initOID = []
    probe_session = Session(hostname=ip, remote_port=port, community='public', version=2)

    for s in range(0, ReqSamp + 1):
        dt2_NextTime = time.time()  # Set the value of dt2_NextTime
        resp = getResp()
        getResp_process(resp)

        if s != 0:
            print(end="\n")

        timenow = time.time()
        time.sleep(abs(RequestInterval - timenow + dt2_NextTime))


if ReqSamp == -1:
    run_probe()
else:
    run_sample()
